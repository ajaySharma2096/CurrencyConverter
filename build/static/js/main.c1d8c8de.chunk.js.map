{"version":3,"sources":["Components/CurrencyAPI/CurrencyAPI.js","Components/Home/component/Home.js","App.js","serviceWorker.js","index.js"],"names":["API_Action","fetchCurrency","callback","a","Axios","get","res","getExchangeRates","baseServerURL","data","Home","props","handleChange","event","name","target","setState","state","value","ClickHandler","inputValueRef","current","alert","currFromExchangeRate","exnchangeRateData","rates","currencyList","currFrom","finalResult","currTo","currencyInputValue","finalResultValue","toFixed","inputValueChangeHandler","React","createRef","result","dropDowmValues","Object","keys","this","map","item","index","key","className","FormControl","variant","InputLabel","htmlFor","Select","native","onChange","label","inputProps","id","aria-label","type","ref","placeholder","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1d8c8de.chunk.js","sourcesContent":["import Axios from 'axios';\n\nexport const API_Action = {\n    fetchCurrency,\n    getExchangeRates\n};\n\nconst baseServerURL = 'http://localhost:5000/api/currency';\n\nfunction fetchCurrency(callback) {\n\t(async () => {\n        const res = await Axios.get(baseServerURL);\n        callback(res)\n\t})();\n}\n\nfunction getExchangeRates(callback){\n    (async () => {\n        const res = await Axios.get(baseServerURL + '/getExchangeRates');\n        callback(res.data)\n\t})();\n}\n","import React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport './style.css';\nimport { API_Action } from '../../CurrencyAPI/CurrencyAPI';\nclass Home extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrFrom: '',\n\t\t\tcurrTo: '',\n\t\t\tname: '',\n\t\t\tcurrencyList: [],\n\t\t\texnchangeRateData: {},\n\t\t\tcurrencyInputValue: '',\n\t\t\tfinalResultValue: '',\n\t\t};\n\t\tthis.inputValueRef = React.createRef();\n\t}\n\n\tcomponentDidMount() {\n\t\tAPI_Action.fetchCurrency((result) => {\n\t\t\tthis.setState({ currencyList: result.data });\n\t\t});\n\t\tAPI_Action.getExchangeRates((data) => {\n\t\t\tthis.setState({ exnchangeRateData: data });\n\t\t});\n\t}\n\n\thandleChange = (event) => {\n\t\tconst name = event.target.name;\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\t[name]: event.target.value,\n\t\t});\n\t};\n\n\tClickHandler = () => {\n\t\tlet currencyValue = this.inputValueRef.current.value;\n\t\tif (currencyValue === '') {\n\t\t\talert('Please Enter some value');\n\t\t} else {\n\t\t\tlet currFromExchangeRate = this.state.exnchangeRateData.rates[this.state.currencyList[this.state.currFrom]];\n\t\t\tlet currToExchangeRate = this.state.exnchangeRateData.rates[this.state.currencyList[this.state.currTo]];\n\t\t\tvar finalResult = (currToExchangeRate / currFromExchangeRate) * this.state.currencyInputValue;\n\t\t\tthis.setState({\n\t\t\t\tfinalResultValue: finalResult.toFixed(2),\n\t\t\t});\n\t\t}\n\t};\n\n\tinputValueChangeHandler = (event) => {\n\t\tthis.setState({\n\t\t\tcurrencyInputValue: event.target.value,\n\t\t});\n\t};\n\n\trender() {\n\t\tconst currList = Object.keys(this.state.currencyList);\n\t\tconst dropDowmValues = currList.map(function (item, index) {\n\t\t\treturn (\n\t\t\t\t<option value={item} key={index}>\n\t\t\t\t\t{item}\n\t\t\t\t</option>\n\t\t\t);\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"pd-25\">\n\t\t\t\t<div className=\"top-header\">Currency Converter</div>\n\t\t\t\t<div className=\"dd-container\">\n\t\t\t\t\t<FormControl variant=\"outlined\" className=\"currencyDropdown dd-from\">\n\t\t\t\t\t\t<InputLabel htmlFor=\"outlined-age-native-simple\">Currency From</InputLabel>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tnative\n\t\t\t\t\t\t\tvalue={this.state.currFrom}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tlabel=\"Currency From\"\n\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\tname: 'currFrom',\n\t\t\t\t\t\t\t\tid: 'currencyFromDrop',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option aria-label=\"None\" value=\"\" />\n\t\t\t\t\t\t\t{dropDowmValues}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<FormControl variant=\"outlined\" className=\"currencyDropdown dd-to\">\n\t\t\t\t\t\t<InputLabel htmlFor=\"outlined-age-native-simple\">Currency To</InputLabel>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tnative\n\t\t\t\t\t\t\tvalue={this.state.currTo}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tlabel=\"Currency To\"\n\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\tname: 'currTo',\n\t\t\t\t\t\t\t\tid: 'currencyToDrop',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option aria-label=\"None\" value=\"\" />\n\t\t\t\t\t\t\t{dropDowmValues}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tref={this.inputValueRef}\n\t\t\t\t\tname=\"value\"\n\t\t\t\t\tvalue={this.state.currencyInputValue}\n\t\t\t\t\tonChange={this.inputValueChangeHandler}\n\t\t\t\t\tclassName=\"val-input\"\n\t\t\t\t\tplaceholder=\"Enter Currency Value\"\n\t\t\t\t></input>\n\t\t\t\t<div className=\"btn-container\">\n\t\t\t\t\t<button className=\"submit-btn\" onClick={this.ClickHandler}>\n\t\t\t\t\t\tConvert\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"res-container\">\n\t\t\t\t\t{this.state.finalResultValue === ''\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: this.state.currencyInputValue +\n\t\t\t\t\t\t  ' ' +\n\t\t\t\t\t\t  this.state.currFrom +\n\t\t\t\t\t\t  ' = ' +\n\t\t\t\t\t\t  this.state.finalResultValue +\n\t\t\t\t\t\t  ' ' +\n\t\t\t\t\t\t  this.state.currTo}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home/component/Home';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"App\">\n       <Home></Home>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}